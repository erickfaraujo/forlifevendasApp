@page "/detalhesCliente/{idCliente}"
@using System.Net;
@using ForlifeApplication.Web.Pages.Vendas

@inject IForlifeVendasApi ForLifeVendasApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
<div class="maindiv">
    <div class="buscaClientediv">
        <div class="mb-3">
            <h1>@cliente.Nome</h1>
        </div>
        
        <div>
            <dl class="row">
                <dt class=" col-sm-2">Email</dt>
                <dd class=" col-sm-9">@cliente.Email</dd>

                <dt class=" col-sm-2">Telefone</dt>
                <dd class=" col-sm-9">@cliente.Telefone</dd>

                <dt class=" col-sm-2">Local</dt>
                <dd class=" col-sm-9">@cliente.NomeLocal</dd>

                <dt class=" col-sm-2">Data de Nascimento</dt>
                <dd class=" col-sm-9">@dtNasc</dd>

                <dt class=" col-sm-2">Observações</dt>
                <dd class=" col-sm-9">@cliente.Observacao</dd>
            </dl>
        </div>
    </div>

    <div class="mb-3">
        <div class="mb-2">
            <NavLink href="clientes">
                <button type="button" class="btn btn-secondary">Voltar</button>
            </NavLink>
        </div>
        <div class="mb-2">
            <button @onclick=NavigateToRegistrar class="btn btn-primary">Registrar Venda</button>
        </div>
        <div class="mb-2">
            <button @onclick=NavigateToEditarCliente class="btn btn-primary">Editar Cliente</button>
        </div>
    </div>
</div>

<div class="mb-3">
    <h3>Últimas Compras</h3>
     
    @if (pedidosPagos)
    {
        <button @onclick=FiltrarPedidos class="btn btn-secondary btn-sm">Exibir apenas pedidos pendentes</button>
    }
    else
    {
        <button @onclick=FiltrarPedidos class="btn btn-secondary btn-sm">Exibir todos os pedidos</button>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Data</th>
                <th>Valor</th>
                <th>Valor Pago</th>
                <th>Status</th>
                <th><center>Visualizar Venda</center></th>
                <th><center>Registrar Pagamento</center></th>
            </tr>
        </thead>

         @if (vendas == null)
        {
            <tr>Cliente não possui pedidos cadatrados</tr>
        }
        else
        {
            <tbody>
                @foreach (var pedido in vendas.Pedidos)
                {
                    <tr>
                        <td>@pedido.DataPedido.ToShortDateString()</td>
                        <td>R$@pedido.Valor</td>
                        <td>R$@pedido.TotalPagamento</td>
                        <td>@pedido.Status</td>
                        <td>
                            <center>
                                <a href="/detalhesVenda/@pedido.IdPedido">
                                    <span class="oi oi-eye" id="visualizar" />
                                </a>
                            </center>
                        </td>
                        <td>
                            @if (pedido.Status is "PENDENTE")
                            {
                                pedido.SaldoDevedor = (pedido.Valor - pedido.TotalPagamento).ToString();
                                <center>
                                    <a href="registrarPagamento/@idCliente/@pedido.IdPedido/@pedido.SaldoDevedor" aria-hidden="true">
                                        <span class="oi oi-dollar" />
                                    </a>
                                </center>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>

@code {
    [Parameter]
    public string idCliente { get; set; }
    private Cliente cliente;
    private GetPedidosClienteResponse vendas;
    private bool pedidosPagos = true;
    private string dtNasc;

    protected override async Task OnInitializedAsync()
    {
        var responseCliente = ForLifeVendasApi.GetClienteById(idCliente).Result;

        if (responseCliente.IsSuccessStatusCode)
        {
            cliente = responseCliente.Content.cliente;
            dtNasc = cliente.Dtnascimento is not null ? DateTime.Parse(cliente.Dtnascimento).ToShortDateString() : null;
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao consultar detalhes do cliente. Erro: {responseCliente.Error.Message}");

        await GetPedidosCliente();
    }

    protected async Task FiltrarPedidos()
    {
        pedidosPagos = !pedidosPagos;
        await GetPedidosCliente();
    }

    protected async Task GetPedidosCliente()
    {
        var responsePedidos = await ForLifeVendasApi.GetPedidosCliente(idCliente, pedidosPagos);

        if (responsePedidos.IsSuccessStatusCode)
        {
            if (responsePedidos.Content.Pedidos is not null)
                vendas = responsePedidos.Content;
            else
                vendas = null;
        }
        else if(responsePedidos.StatusCode is HttpStatusCode.NotFound) 
            vendas = null;
        else
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao consultar pedidos do cliente. Erro: {responsePedidos.Error.Message}");
    }

    protected void NavigateToRegistrar()
        => NavManager.NavigateTo($"/inserirVenda/{idCliente}/{cliente.Nome}");

    protected void NavigateToEditarCliente()
        => NavManager.NavigateTo($"/editarCliente/{idCliente}/{cliente.NomeLocal}");
}