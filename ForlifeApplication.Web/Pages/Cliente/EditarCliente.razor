@page "/editarCliente/{idCliente}/{localCliente}"

@inject IForlifeVendasApi ForLifeVendasApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<div class="maindiv">
    <h1>Editar Cliente</h1>
    <div class="formEditarCliente">
        <EditForm Model="cadastrarClienteDto" OnValidSubmit="Enviar" class="col-6">
            <DataAnnotationsValidator/>
            <ValidationSummary />

            <div class="input-group mb-2">
                <span class="input-group-text">Nome </span>
                <InputText @bind-Value="@cadastrarClienteDto.Nome" class="form-control" />
            </div>

            <div class="input-group mb-2">
                <span class="input-group-text">Telefone </span>
                <InputText id="telefone" @bind-Value="@cadastrarClienteDto.Telefone" class="form-control" />
            </div>

            <div class="input-group mb-2">
                <span class="input-group-text">Email </span>
                <InputText id="email" @bind-Value="@cadastrarClienteDto.Email" class="form-control" />
            </div>

            <div class="input-group mb-2">
                <span class="input-group-text">Data de Nascimento </span>
                <InputText id="dtNasc" @bind-Value="cadastrarClienteDto.DataNascimento" class="form-control" />
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text">Local </span>
                <InputSelect id="local" @bind-Value="@cadastrarClienteDto.IdlocalVenda" class="form-select">
                    <option value="@cadastrarClienteDto.IdlocalVenda">@localCliente</option>
                     @foreach(var local in locais.LocaisVenda)
                     {
                         <option value="@local.IdLocal">@local.Descricao</option>
                     }
                </InputSelect>
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text">Observações </span>
                <InputTextArea id="observacoes" @bind-Value="@cadastrarClienteDto.Observacao" placeholder="Insira aqui medidas ou outras informações sobre o cliente" class="form-control" />
            </div>

            <NavLink href="clientes">
                <button type="button" class="btn btn-secondary">Cancelar</button>
            </NavLink>

            <button type="submit" class="btn btn-primary">Atualizar</button>
    
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string idCliente { get; set; }
    [Parameter]
    public string localCliente { get; set; }

    private CadastrarClienteDto cadastrarClienteDto { get; set; } = new();
    private PutClienteRequest atualizaClienteRequest { get; set; } = new();
    private GetLocaisVendaResponse locais;
    private GetClienteByIdResponse GetClienteByIdResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BuscarLocais();

        await BuscarDetalhesCliente();

        var date = DateTime.Parse(GetClienteByIdResponse.cliente.Dtnascimento);
        cadastrarClienteDto.DataNascimento = date.ToString("dd/MM/yyyy");
    }

    private async void Enviar()
    {
        atualizaClienteRequest.Id = idCliente;
        atualizaClienteRequest.Nome = cadastrarClienteDto.Nome;
        atualizaClienteRequest.Telefone = cadastrarClienteDto.Telefone;
        atualizaClienteRequest.Email = cadastrarClienteDto.Email;
        atualizaClienteRequest.DataNascimento = DateTime.Parse(cadastrarClienteDto.DataNascimento);
        atualizaClienteRequest.IdlocalVenda = cadastrarClienteDto.IdlocalVenda;
        atualizaClienteRequest.Observacao = cadastrarClienteDto.Observacao;

        var response = await ForLifeVendasApi.PutCliente(atualizaClienteRequest);

        if(response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Cliente atualizado com sucesso!");
            NavManager.NavigateTo("/clientes");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao editar cliente. Erro: {response.Error.Message}");
            return;
        }
    }

    protected async Task BuscarLocais()
    {
        var responselocais = ForLifeVendasApi.GetLocaisVenda(null, null).Result;

        if (responselocais.IsSuccessStatusCode)
            locais = responselocais.Content;
        else
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao consultar lista de locais. Erro: {responselocais.Error.Message}");
    }

    protected async Task BuscarDetalhesCliente()
    {
        var responseCliente = ForLifeVendasApi.GetClienteById(idCliente).Result;

        if (responseCliente.IsSuccessStatusCode)
        {
            GetClienteByIdResponse = responseCliente.Content;
            cadastrarClienteDto.Nome = GetClienteByIdResponse.cliente.Nome;
            cadastrarClienteDto.Telefone = GetClienteByIdResponse.cliente.Telefone;
            cadastrarClienteDto.Email = GetClienteByIdResponse.cliente.Email;
            cadastrarClienteDto.DataNascimento = GetClienteByIdResponse.cliente.Dtnascimento;
            cadastrarClienteDto.IdlocalVenda = GetClienteByIdResponse.cliente.Idlocal;
            cadastrarClienteDto.Observacao = GetClienteByIdResponse.cliente.Observacao;
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao consultar detalhes do cliente. Erro: {responseCliente.Error.Message}");
    }
}
