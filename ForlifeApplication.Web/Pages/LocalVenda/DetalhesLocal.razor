@page "/detalhesLocal/{idLocal}/{nomeLocal}"
@using System.Net;
@using ForlifeApplication.Web.Pages.Cliente

@inject IForlifeVendasApi ForLifeVendasApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
<div class="maindiv">
    <div class="buscaClientediv">
        <h1>Detalhes do Local</h1>
        <h2>@nomeLocal</h2>
    </div>
        <div class="mb-2">
            <NavLink href="locais">
                <button type="button" class="btn btn-secondary">Voltar</button>
            </NavLink>
        </div>
</div>

<div>
    @if (clientes == null)
    {
        <p>Nenhum cliente cadastrado nesse local</p>
    }
    else
    {
        @if (clientes is not null)
        {
            <ExibirClientesLocal Clientes="@clientes" />
        }
        else
        {
            <p>Nenhum cliente encontrado, utilize o campo de pesquisa acima</p>
        }
    }

    <div>
        <NavLink href="cadastroCliente" aria-hidden="true">
            <button class="btn btn-success">Novo Cliente</button>
        </NavLink>
    </div>

</div>

@code {
    [Parameter]
    public string idLocal { get; set; }
    [Parameter]
    public string nomeLocal { get; set; }
    private GetClientesResponse clientes;

    protected override async Task OnInitializedAsync()
        => await GetClientes();

    protected async Task GetClientes()
    {
        var responseClientes = await ForLifeVendasApi.GetClientesByLocal(idLocal);

        if (responseClientes.IsSuccessStatusCode)
        {
            if (responseClientes.Content.Clientes is not null)
                clientes = responseClientes.Content;
            else
                clientes = default;
        }
        else if(responseClientes.StatusCode is HttpStatusCode.NotFound) 
            clientes = default;
        else
            await JsRuntime.InvokeVoidAsync("alert", $"Falha ao consultar clientes. Erro: {responseClientes.Error.Message}");
    }
}